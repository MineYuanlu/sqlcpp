name: CMake Build and Test
on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: 设置可重用的字符串
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: 缓存 vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: |
            vcpkg
            vcpkg\installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: 安装 vcpkg 和 SQLite3 (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (-Not (Test-Path "vcpkg")) {
            git clone https://github.com/microsoft/vcpkg.git
          }
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg.exe install sqlite3:x64-windows

          # 设置 VCPKG_ROOT 环境变量
          echo "VCPKG_ROOT=${{ github.workspace }}\vcpkg" >> $env:GITHUB_ENV

      - name: 安装 SQLite3 (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev

      - name: 设置 CMake 工具链文件 (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "CMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" >> $env:GITHUB_ENV

      - name: 设置 CMake 工具链文件 (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "CMAKE_TOOLCHAIN_FILE=" >> $env:GITHUB_ENV

      - name: 配置 CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DSQLCPP_TESTS=ON
          -DCMAKE_TOOLCHAIN_FILE=${{ env.CMAKE_TOOLCHAIN_FILE }}
          -S ${{ github.workspace }}

      - name: 构建
        run: |
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: 测试
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          ctest --build-config ${{ matrix.build_type }} --verbose
